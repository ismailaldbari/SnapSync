#!/usr/bin/bash

# =============================================
# Color Definitions for Enhanced UI
# =============================================
RED='\033[0;31m'          # For errors and warnings
GREEN='\033[0;32m'        # For success messages
YELLOW='\033[1;33m'       # For prompts and alerts
BLUE='\033[0;34m'         # For main headings
CYAN='\033[0;36m'         # For general information
PURPLE='\033[0;35m'       # For paths and commands
BOLD='\033[1m'            # For bold text
UNDERLINE='\033[4m'       # For underlined text
NC='\033[0m'              # Reset color

# =============================================
# Core Variables
# =============================================
BACKUP_DIR="$HOME/Backup/snapshots"
SNAPSHOT_NAME=""
SNAPSHOT_DIR=""

# Optimized exclusion list
EXCLUSIONS=(
    "/dev/*" "/proc/*" "/sys/*" "/media/*" "/mnt/*" "/tmp/*" "/run/*" "/var/run/*" "/var/lock/*"
    "/lost+found" "/timeshift*" "/data/*" "/DATA/*" "/cdrom/*" "/sdcard/*" "/system/*"
    "/swapfile" "/snap/*" "/var/cache/*" "/root/*" "/home/*"
)

# =============================================
# Helper Functions
# =============================================

list_snapshots() {
    local snapshots=($(ls -r "$BACKUP_DIR" 2>/dev/null))
    if [ ${#snapshots[@]} -eq 0 ]; then
        echo -e "${YELLOW}No backups available${NC}"
    else
        for i in "${!snapshots[@]}"; do
            echo -e "${BLUE}$((i+1))) ${PURPLE}${snapshots[$i]}${NC}"
        done
    fi
}

create_exclude_file() {
    local exclude_file="$1"
    echo -e "${CYAN}Creating exclusions file: ${PURPLE}$exclude_file${NC}"
    printf "%s\n" "${EXCLUSIONS[@]}" > "$exclude_file"
}

# =============================================
# Main Functions
# =============================================

backup_system() {
    clear
    echo -e "${BLUE}${BOLD}\n=== Backup System ===${NC}\n"
    echo -e "${CYAN}üìÇ Available snapshots:${NC}\n"
    
    list_snapshots
    
    echo -e "\n${YELLOW}1) Create new backup"
    echo -e "2) Update existing backup${NC}"
    read -p "$(echo -e ${BOLD}"\nSelect option (1/2): "${NC})" ACTION
    
    if [[ "$ACTION" == "1" ]]; then
        SNAPSHOT_NAME=$(date +'%Y-%m-%d_%H-%M-%S')
        echo -e "\n${GREEN}Creating new snapshot: ${PURPLE}$SNAPSHOT_NAME${NC}"
        SNAPSHOT_DIR="$BACKUP_DIR/$SNAPSHOT_NAME/localhost"
        mkdir -p "$SNAPSHOT_DIR/"
    elif [[ "$ACTION" == "2" ]]; then
        SNAPSHOTS=($(ls -r "$BACKUP_DIR"))
        if [ ${#SNAPSHOTS[@]} -eq 0 ]; then
            echo -e "${RED}No backups available to update${NC}"
            return
        fi
        
        read -p "$(echo -e ${YELLOW}"\nEnter backup number to update: "${NC})" SNAPSHOT_NUMBER
        if [[ "$SNAPSHOT_NUMBER" -lt 1 || "$SNAPSHOT_NUMBER" -gt "${#SNAPSHOTS[@]}" ]]; then
            echo -e "${RED}Invalid number${NC}"
            return
        fi
        
        OLD_SNAPSHOT_NAME="${SNAPSHOTS[$((SNAPSHOT_NUMBER-1))]}"
        SNAPSHOT_NAME=$(date +'%Y-%m-%d_%H-%M-%S')
        mv "$BACKUP_DIR/$OLD_SNAPSHOT_NAME" "$BACKUP_DIR/$SNAPSHOT_NAME"
        SNAPSHOT_DIR="$BACKUP_DIR/$SNAPSHOT_NAME/localhost"
        echo -e "\n${GREEN}Updating snapshot: ${PURPLE}$SNAPSHOT_NAME${NC}"
    else
        echo -e "${RED}Invalid option${NC}"
        return
    fi

    EXCLUDE_FILE="$BACKUP_DIR/$SNAPSHOT_NAME/exclude.list"
    create_exclude_file "$EXCLUDE_FILE"

    echo -e "\n${CYAN}üöÄ Starting backup process...${NC}"
    RSYNC_CMD=("rsync" "-ahv" "--delete" "--numeric-ids" "--hard-links" "--inplace" "--info=progress2")
    for exclusion in "${EXCLUSIONS[@]}"; do
        RSYNC_CMD+=("--exclude=$exclusion")
    done
    RSYNC_CMD+=("/" "$SNAPSHOT_DIR/")

    if "${RSYNC_CMD[@]}"; then
        echo -e "\n${GREEN}‚úÖ Backup completed successfully${NC}"
        
        # Create info file
        JSON_FILE="$BACKUP_DIR/$SNAPSHOT_NAME/info.json"
        echo -e "${CYAN}Creating info file: ${PURPLE}$JSON_FILE${NC}"
        
        # Fixed JSON creation
        cat > "$JSON_FILE" <<EOF
{
  "created": "$(date +%s)",
  "sys-uuid": "$(cat /sys/class/dmi/id/product_uuid 2>/dev/null || uuidgen)",
  "sys-distro": "$(grep ^NAME /etc/os-release | cut -d= -f2 | tr -d '"') $(grep ^VERSION_ID /etc/os-release | cut -d= -f2 | tr -d '"')",
  "app-version": "$(rsync --version | head -n1 | awk '{print $3}')",
  "file_count": "$(find "$SNAPSHOT_DIR" -type f | wc -l)",
  "tags": "ondemand",
  "comments": "Backup using rsync",
  "live": "false",
  "type": "rsync"
}
EOF
    else
        echo -e "\n${RED}‚ùå Backup failed${NC}"
    fi
}

restore_system() {
    clear
    echo -e "${BLUE}${BOLD}\n=== Restore System ===${NC}\n"
    echo -e "${CYAN}üìÇ Available snapshots:${NC}\n"
    
    list_snapshots
    
    if [ -z "$(ls -A "$BACKUP_DIR" 2>/dev/null)" ]; then
        return
    fi
    
    read -p "$(echo -e ${YELLOW}"\nEnter backup number to restore: "${NC})" SNAPSHOT_NUMBER
    SNAPSHOTS=($(ls -r "$BACKUP_DIR"))
    
    if [[ "$SNAPSHOT_NUMBER" -lt 1 || "$SNAPSHOT_NUMBER" -gt "${#SNAPSHOTS[@]}" ]]; then
        echo -e "${RED}Invalid number${NC}"
        return
    fi
    
    SNAPSHOT_NAME="${SNAPSHOTS[$((SNAPSHOT_NUMBER-1))]}"
    SNAPSHOT_PATH="$BACKUP_DIR/$SNAPSHOT_NAME/localhost"
    
    echo -e "\n${RED}${BOLD}WARNING: This will overwrite your system with the backup!${NC}"
    read -p "$(echo -e ${YELLOW}"Are you sure you want to restore from $SNAPSHOT_NAME? (y/N): "${NC})" CONFIRM
    
    if [[ "$CONFIRM" != "y" && "$CONFIRM" != "Y" ]]; then
        echo -e "${BLUE}Restore cancelled${NC}"
        return
    fi
    
    echo -e "\n${CYAN}üöÄ Starting restore process...${NC}"
    RSYNC_CMD=("rsync" "-ahv" "--delete" "--numeric-ids" "--hard-links" "--inplace" "--info=progress2")
    for exclusion in "${EXCLUSIONS[@]}"; do
        RSYNC_CMD+=("--exclude=$exclusion")
    done
    RSYNC_CMD+=("$SNAPSHOT_PATH/" "/")
    
    if "${RSYNC_CMD[@]}"; then
        echo -e "\n${GREEN}‚úÖ Restore completed successfully${NC}"
    else
        echo -e "\n${RED}‚ùå Restore failed${NC}"
    fi
}

# Main menu
start() {
    while true; do
        clear
        echo -e "${BLUE}${BOLD}\n===== Backup/Restore System =====${NC}"
        echo -e "${GREEN}1) ${CYAN}Create new backup${NC}"
        echo -e "${GREEN}2) ${CYAN}Restore from backup${NC}"
        echo -e "${GREEN}3) ${CYAN}Exit${NC}"
        read -p "$(echo -e ${YELLOW}${BOLD}"\nEnter choice (1/2/3): "${NC})" CHOICE

        case $CHOICE in
            1) backup_system ;;
            2) restore_system ;;
            3) echo -e "\n${BLUE}Goodbye üëã${NC}"; exit 0 ;;
            *) echo -e "\n${RED}Invalid choice, please try again${NC}" ;;
        esac
        
        read -p "$(echo -e ${YELLOW}"\nPress Enter to continue..."${NC})" -r
    done
}

start
